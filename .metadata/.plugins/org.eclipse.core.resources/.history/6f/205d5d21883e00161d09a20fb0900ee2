package querying.basic;

import static org.hamcrest.Matchers.*;
import static org.junit.Assert.*;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.persistence.TypedQuery;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

@ContextConfiguration
@RunWith(SpringJUnit4ClassRunner.class)
@Transactional
public class GenerateSchemaTests {

	@PersistenceContext
	private EntityManager entityManager;

	@Before
	public void setUp() throws Exception {
		assertNotNull(entityManager);
	}

	@After
	public void tearDown() throws Exception {
	}

	// TODO 06: Run these tests and learn about JPQL
	// Make the tests pass with the correct query.
	// Complete the partial query strings below.

	@Test
	@Sql(statements={
		"INSERT INTO Person (name, gender)"
				+ " VALUES ('Mike Thompson', 'MALE')",
		"INSERT INTO Person (name, gender)"
				+ " VALUES ('Paul Johnson', 'MALE')",
		"INSERT INTO Person (name, gender)"
				+ " VALUES ('Sally Jones', 'FEMALE')",
		"INSERT INTO Person (name, gender)"
				+ " VALUES ('Tiffany Thompson', 'FEMALE')"
	})
	public void nameLike1() throws Exception {
		// TODO 06a: Use JPQL to retrieve Person(s) with a name LIKE '%son%'
		TypedQuery<Person> query = entityManager.createQuery(
				"FROM Person", Person.class);
		query.setParameter("name", "%son%");
		//
		List<Person> persons = query.getResultList();
		assertEquals(3, persons.size());
		assertThat(persons,
				hasItem(hasProperty("name", equalTo("Mike Thompson"))));
		assertThat(persons,
				hasItem(hasProperty("name", equalTo("Paul Johnson"))));
		assertThat(persons,
				hasItem(hasProperty("name", equalTo("Tiffany Thompson"))));
	}

	@Test
	@Sql(statements={
		"INSERT INTO Person (name, gender)"
				+ " VALUES ('Mike Thompson', 'MALE')",
		"INSERT INTO Person (name, gender)"
				+ " VALUES ('Paul Johnson', 'MALE')",
		"INSERT INTO Person (name, gender)"
				+ " VALUES ('Sally Jones', 'FEMALE')",
		"INSERT INTO Person (name, gender)"
				+ " VALUES ('Tiffany Thompson', 'FEMALE')"
	})
	public void nameLike2() throws Exception {
		// TODO 06b: Use JPQL to retrieve Person(s) with a name LIKE '%JO%'
		// Use LOWER to make name comparison case-insensitive
		// Use CONCAT to add wildcards (%) before and after the search string
		TypedQuery<Person> query = entityManager.createQuery(
				"FROM Person",
				Person.class);
		query.setParameter("name", "JO");
		List<Person> persons = query.getResultList();
		assertEquals(2, persons.size());
		assertThat(persons,
				hasItem(hasProperty("name", equalTo("Paul Johnson"))));
		assertThat(persons,
				hasItem(hasProperty("name", equalTo("Sally Jones"))));
	}

	@Test
	@Sql(statements={
		"INSERT INTO Person (name, gender)"
				+ " VALUES ('Mike Thompson', 'MALE')",
		"INSERT INTO Person (name, gender)"
				+ " VALUES ('Paul Johnson', 'MALE')",
		"INSERT INTO Person (name, gender)"
				+ " VALUES ('Sally Jones', 'FEMALE')",
		"INSERT INTO Person (name, gender)"
				+ " VALUES ('Tiffany Thompson', 'FEMALE')",
		"INSERT INTO Person (name, gender)"
				+ " VALUES ('Margaret Thatcher', 'FEMALE')"
	})
	public void gender() throws Exception {
		// TODO 06c: Use JPQL to retrieve females
		TypedQuery<Person> query = entityManager.createQuery(
				"FROM Person",
				Person.class);
		query.setParameter("gender", Gender.FEMALE);
		List<Person> persons = query.getResultList();
		assertEquals(3, persons.size());
		assertThat(persons,
				hasItem(hasProperty("name", equalTo("Sally Jones"))));
		assertThat(persons,
				hasItem(hasProperty("name", equalTo("Tiffany Thompson"))));
		assertThat(persons,
				hasItem(hasProperty("name", equalTo("Margaret Thatcher"))));
	}

	@Test
	@Sql(statements={
		"INSERT INTO Person (name, gender)"
				+ " VALUES ('JP Morgan', 'MALE')",
		"INSERT INTO Person (name, gender)"
				+ " VALUES ('Henry Ford', 'MALE')",
		"INSERT INTO Person (name, gender)"
				+ " VALUES ('Mike Thompson', 'MALE')",
		"INSERT INTO Person (name, gender)"
				+ " VALUES ('Paul Johnson', 'MALE')",
		"INSERT INTO Person (name, gender)"
				+ " VALUES ('Sally Jones', 'FEMALE')",
		"INSERT INTO Person (name, gender)"
				+ " VALUES ('Tiffany Thompson', 'FEMALE')"
	})
	@SuppressWarnings("unchecked")
	public void count() throws Exception {
		// TODO 06d: Use JPQL to count the number of males and females
		// Hint: Use COUNT, GROUP BY, and ORDER BY
		Query query = entityManager.createQuery(
				"SELECT p FROM Person p");
		List<Object[]> results = query.getResultList();
		assertEquals(2, results.size());
		// (Gender) results.get(0)[0]
		// (Long) results.get(0)[1]
		assertEquals(Gender.FEMALE, results.get(0)[0]);
		assertEquals(2L, results.get(0)[1]);
		assertEquals(Gender.MALE, results.get(1)[0]);
		assertEquals(4L, results.get(1)[1]);
	}

}
