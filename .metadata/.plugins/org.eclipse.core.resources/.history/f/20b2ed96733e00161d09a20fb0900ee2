package mapping.hibernate.usertype;

import java.io.Serializable;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.MonthDay;

import org.hibernate.HibernateException;
import org.hibernate.engine.spi.SessionImplementor;
import org.hibernate.type.IntegerType;
import org.hibernate.type.Type;
import org.hibernate.usertype.CompositeUserType;

// TODO 04: Define custom mapping for java.time.MonthDay

// TODO 04a: Study the partial code that was provided
public class PersistentMonthDayAsIntegers implements CompositeUserType {

	@Override
	public String[] getPropertyNames() {
		// Ordering is important!
		// It must match the order the columns are defined in the property mapping.
		return new String[] { "month", "day" };
	}

	@Override
	public Type[] getPropertyTypes() {
		return new Type[] { IntegerType.INSTANCE, IntegerType.INSTANCE };
	}

	@Override
	public Object getPropertyValue(Object component, int propertyIndex) throws HibernateException {
		if (component == null) {
			return null;
		}
		// TODO 04b: Cast the component parameter as java.time.MonthDay
		// Store the component as a java.time.MonthDay variable.
		// This will be used in the switch statement below.
		// MonthDay monthDay = ... component;
		MonthDay monthDay = (MonthDay) component;
		// TODO 04c: Return the appropriate property of the MonthDay based on index
		// (as determined by propertyIndex parameter)
		switch (propertyIndex) {
		case 0:
			// index 0, return the month value
			monthDay.getMonth();
		case 1:
			// index 1, return the day of month value
			monthDay.getDayOfMonth();
		default:
			// otherwise, an exception is thrown
			throw new HibernateException(
					"Invalid property index [" + propertyIndex + "]" );
		}
	}

	@Override
	public void setPropertyValue(Object component, int propertyIndex, Object value) throws HibernateException {
		// This should not be called if #isMutable() returns false.
		throw new UnsupportedOperationException();
	}

	@SuppressWarnings("rawtypes")
	@Override
	public Class returnedClass() {
		// TODO 04d: Return the class being mapped (java.time.MonthDay)
		return null;
	}

	@Override
	public boolean equals(Object x, Object y) throws HibernateException {
    	if ((x == null) && (y == null)) {
    		return true;
    	}
        if ((x == null) || (y == null)) {
            return false;
        }
        return x.equals(y);
	}

	@Override
	public int hashCode(Object x) throws HibernateException {
		return x.hashCode();
	}

	@Override
	public Object nullSafeGet(ResultSet rs, String[] names, SessionImplementor session, Object owner)
			throws HibernateException, SQLException {
		assert names.length == 2;
		Integer month = (Integer) IntegerType.INSTANCE.get(rs, names[0], session);
		Integer dayOfMonth = (Integer) IntegerType.INSTANCE.get(rs, names[1], session);
		if (month == null || dayOfMonth == null) {
			return null;
		}
		// TODO 04e: Return an instance of java.time.MonthDay
		// with the given month and dayOfMonth (already initialized above)
		// Hint: Since java.time.MonthDay does not have a public constructor,
		// use one of its static factory methods (e.g. MonthDay.of(int, int));
		return null;
	}

	@Override
	public void nullSafeSet(PreparedStatement st, Object value, int index, SessionImplementor session)
			throws HibernateException, SQLException {
		if (value == null) {
			IntegerType.INSTANCE.set(st, null, index, session);
			IntegerType.INSTANCE.set(st, null, index + 1, session);
		} else {
			MonthDay monthDay = (MonthDay) value;
			IntegerType.INSTANCE.set(st, monthDay.getMonthValue(), index, session);
			IntegerType.INSTANCE.set(st, monthDay.getDayOfMonth(), index + 1, session);
		}
	}

	@Override
	public Object deepCopy(Object value) throws HibernateException {
		return value; // since value is immutable
	}

	@Override
	public boolean isMutable() {
		return false;
	}

	@Override
	public Serializable disassemble(Object value, SessionImplementor session) throws HibernateException {
		return (Serializable) value;
	}

	@Override
	public Object assemble(Serializable cached, SessionImplementor session, Object owner) throws HibernateException {
		return cached;
	}

	@Override
	public Object replace(Object original, Object target, SessionImplementor session, Object owner)
			throws HibernateException {
		return original;
	}

}
